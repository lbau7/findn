% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/findn.R
\name{findn}
\alias{findn}
\title{Find the Sample Size}
\usage{
findn(
  fun,
  targ,
  start,
  k = 25,
  init_evals = 100,
  r = 4,
  stop = c("evals", "power_ci", "abs_unc", "rel_unc"),
  max_evals = 2000,
  level = 0.05,
  power_ci_tol = 0.02,
  abs_unc_tol = 10,
  rel_unc_tol = 0.1,
  var_alpha = 0.05,
  var_beta = 1,
  alpha = 0.05,
  alternative = c("two.sided", "one.sided"),
  min_x = 2,
  verbose = FALSE,
  ...
)
}
\arguments{
\item{fun}{A function that estimates the power of a trial. The function has
to take at least two arguments: n, the sample size and k, the number of
iterations.}

\item{targ}{The target power.}

\item{start}{An initial guess for the sample size.}

\item{k}{How often the target function is evaluated at each design point.}

\item{init_evals}{How many evaluations the first model is based on.}

\item{r}{A multiplicator for the range of the initial design points.}

\item{stop}{The stopping criterion. One of \code{"evals"}, \code{"power_ci"}, 
\code{"abs_unc"}, \code{"rel_unc"}.}

\item{max_evals}{The maximum number of simulations.}

\item{level}{Significance level for the confidence intervals if \code{stop} 
is something other than \code{"evals"}. Also used to determine the levels 
for the confidence intervals that are printed if \code{verbose = TRUE}.}

\item{power_ci_tol}{Tolerance parameter if \code{stop = "power_ci"}.}

\item{abs_unc_tol}{Tolerance parameter if \code{stop = "abs_unc"}.}

\item{rel_unc_tol}{Tolerance parameter if \code{stop is "rel_unc"}.}

\item{var_alpha}{Variance of the prior distribution for the intercept.}

\item{var_beta}{Variance of the prior distribution for the slope.}

\item{alpha}{The significance level of the underlying test. This is used to 
compute the mean of the prior distribution of the intercept.}

\item{alternative}{Either "two.sided" or "one.sided". This is only used to
determine the mean of the intercept prior.}

\item{min_x}{The minimum sample size that \code{fun} can be evaluated for.}

\item{verbose}{If \code{TRUE}, the current sample size estimate, the 
predicted power and its \code{level} percent confidence is returned after
every iteration.}

\item{...}{Further optional arguments.}
}
\value{
\code{findn} returns an object of class "\code{findn}". 
  See also \code{\link{print.findn}}.
}
\description{
\code{findn} estimates the sample size for a function that returns a 
simulated power value based on repeated simulations using a model based 
approach.
}
\details{
\code{findn} estimates the sample size for a target function that 
returns a simulated power value for a test or a trial. The target function 
must have at least two arguments, \code{n}, the sample size for which the 
trial is simulated, and \code{k}, that specifies how often the trial is 
simulated. The function has to return an estimate for the power of the trial 
for the sample size \code{n} based on \code{k} Monte Carlo simulations.

\code{findn} uses an algorithm that assumes a probit model and computes
Bayesian parameter estimates. The mean of the prior distribution of the
intercept is computed from the significance level \code{alpha} of the
underlying test and the \code{alternative}. The mean of the prior
distribution of the slope is computed from the initial guess for the sample
size - \code{start}. The variances of the prior distributions can be
adjusted using the arguments \code{var_alpha} and \code{var_beta}.

There are four different stopping criterions. When \code{stop = "evals"} 
the algorithm stops when the target function was evaluated \code{max_evals}
times. When \code{stop = "power_ci"}the algorithm stops when the \code{level}
percent confidence interval of the predicted power at the current sample 
size estimate is within the interval \code{targ} plus and minus
\code{power_ci_tol}. When \code{stop = "abs_unc"} the algorithm stops when 
the number of sample sizes in the uncertainty set smaller than
\code{abs_unc_tol}. The uncertainty set is defined as the set that contains 
all sample sizes for which the \code{level} percent confidence interval for
the predicted power contains \code{targ}. When \code{stop = "rel_unc"} the
algorithm stops when the relative uncertainty range is smaller than
\code{rel_unc_tol}. The relative uncertainty rangeis defined as the greatest
integer in the uncertainty set minus the smallest integer in the uncertainty
set, divided by the smallest number in the uncertainty set. The algorithm also 
stops when \code{stop} is either \code{"power_ci"}, \code{"abs_unc"} or
\code{"rel_unc"} and the stopping criterion couldn't be satisfied within
\code{max_evals} evaluations.
}
\examples{
# Function that simulates the outcomes of a two-sample t-test
ttest <- function(n, k, mu1 = 0, mu2 = 1, sd = 2) {
  sample1 <- matrix(rnorm(n = ceiling(n) * k, mean = mu1, sd = sd),
    ncol = k)
  mean1 <- apply(sample1, 2, mean)
  sd1_hat <- apply(sample1, 2, sd)
  sample2 <- matrix(rnorm(n = ceiling(n) * k, mean = mu2, sd = sd),
    ncol = k)
  mean2 <- apply(sample2, 2, mean)
  sd2_hat <- apply(sample2, 2, sd)
  sd_hat <- sqrt((sd1_hat^2 + sd2_hat^2) / 2)
  teststatistic <- (mean1 - mean2) / (sd_hat * sqrt(2 / n))
  crit <- qt(1 - 0.025, 2 * n - 2)
  return(mean(teststatistic < -crit))
}

res_ttest <- findn(fun = ttest, targ = 0.8, k = 25, start = 100, 
  init_evals = 100, r = 4, stop = "evals", max_evals = 2000, 
  level = 0.05, var_alpha = 0.05, var_beta = 1, alpha = 0.025, 
  alternative = "one.sided", verbose = FALSE)
}
